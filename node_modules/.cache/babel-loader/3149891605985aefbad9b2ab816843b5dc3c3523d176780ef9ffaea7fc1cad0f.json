{"ast":null,"code":"import React, { useEffect } from 'react';\nimport WebFont from 'webfontloader';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Font = function Font(props) {\n  return React.createElement(\"div\", {\n    style: styleGen(props)\n  }, React.createElement(FontLoader, Object.assign({}, props)), props.children);\n};\nvar Text = function Text(props) {\n  return React.createElement(\"p\", Object.assign({}, _extends({}, Object.keys(props).reduce(function (object, key) {\n    if (!['family', 'italic', 'weight', 'onLoad', 'onError', 'onAllLoad', 'onAllError'].includes(key)) {\n      object[key] = props[key];\n    }\n    return object;\n  }, {})), {\n    style: _extends({}, styleGen(props), props.style)\n  }), React.createElement(FontLoader, Object.assign({}, props, {\n    text: props.children\n  })), props.children);\n};\nvar FontLoader = function FontLoader(_ref) {\n  var family = _ref.family,\n    _ref$weight = _ref.weight,\n    weight = _ref$weight === void 0 ? 400 : _ref$weight,\n    _ref$italic = _ref.italic,\n    italic = _ref$italic === void 0 ? false : _ref$italic,\n    _ref$provider = _ref.provider,\n    provider = _ref$provider === void 0 ? 'google' : _ref$provider,\n    _ref$onLoad = _ref.onLoad,\n    onLoad = _ref$onLoad === void 0 ? function () {} : _ref$onLoad,\n    _ref$onError = _ref.onError,\n    onError = _ref$onError === void 0 ? function () {} : _ref$onError,\n    _ref$onAllLoad = _ref.onAllLoad,\n    onAllLoad = _ref$onAllLoad === void 0 ? function () {} : _ref$onAllLoad,\n    _ref$onAllError = _ref.onAllError,\n    onAllError = _ref$onAllError === void 0 ? function () {} : _ref$onAllError,\n    _ref$text = _ref.text,\n    text = _ref$text === void 0 ? undefined : _ref$text;\n  useEffect(function () {\n    var WebFontConfig = {\n      classes: false,\n      fontactive: onLoad,\n      fontinactive: onError,\n      active: onAllLoad,\n      inactive: onAllError\n    };\n    if (provider === 'google') {\n      var fontFamily = GoogleFont({\n        family: family,\n        weight: weight,\n        italic: italic\n      });\n      WebFontConfig.google = {\n        families: [fontFamily],\n        text: text\n      };\n    } else if (provider === 'local') {\n      WebFontConfig.custom = {\n        families: [family]\n      };\n    }\n    WebFont.load(WebFontConfig);\n  }, [family, weight, italic, provider, onLoad, onError]);\n  return null;\n};\nvar GoogleFont = function GoogleFont(_ref2) {\n  var family = _ref2.family,\n    _ref2$weight = _ref2.weight,\n    weight = _ref2$weight === void 0 ? 400 : _ref2$weight,\n    _ref2$italic = _ref2.italic,\n    italic = _ref2$italic === void 0 ? false : _ref2$italic;\n  var encodedURL = encodeURIComponent(family);\n  if (weight !== 400 && italic) {\n    encodedURL += \":bi\";\n  } else if (weight !== 400) {\n    encodedURL += \":\" + weight;\n  } else if (italic) {\n    encodedURL += \":i\";\n  }\n  return encodedURL;\n};\nvar styleGen = function styleGen(_ref3) {\n  var family = _ref3.family,\n    italic = _ref3.italic,\n    weight = _ref3.weight;\n  return {\n    fontFamily: \"'\" + family + \"'\",\n    fontStyle: italic ? 'italic' : undefined,\n    fontWeight: weight\n  };\n};\nexport default Font;\nexport { FontLoader, Text };","map":{"version":3,"mappings":"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","names":["Font","props","React","style","styleGen","FontLoader","children","Text","Object","keys","reduce","object","key","includes","text","family","weight","italic","provider","onLoad","onError","onAllLoad","onAllError","undefined","useEffect","WebFontConfig","classes","fontactive","fontinactive","active","inactive","fontFamily","GoogleFont","google","families","custom","WebFont","load","encodedURL","encodeURIComponent","fontStyle","fontWeight"],"sources":["/Users/vicky/CurrentProjects/podscout/frontend/node_modules/react-font/src/index.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\nimport WebFont from 'webfontloader'\n\ninterface Props extends LoaderProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst Font = (props: Props): JSX.Element => {\n  return (\n    <div style={styleGen(props)}>\n      <FontLoader {...props} />\n      {props.children}\n    </div>\n  )\n}\n\ninterface TextProps extends LoaderProps {\n  children: string\n}\n\nexport const Text = (\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLParagraphElement>,\n    HTMLParagraphElement\n  > &\n    TextProps\n): JSX.Element => {\n  return (\n    <p\n      {...{\n        ...Object.keys(props).reduce((object, key) => {\n          if (\n            ![\n              'family',\n              'italic',\n              'weight',\n              'onLoad',\n              'onError',\n              'onAllLoad',\n              'onAllError'\n            ].includes(key)\n          ) {\n            object[key] = props[key]\n          }\n          return object\n        }, {})\n      }} // pass props but remove font props\n      style={{ ...styleGen(props), ...props.style }} // combine the font style and any custom style from props\n    >\n      <FontLoader {...props} text={props.children} />\n      {props.children}\n    </p>\n  )\n}\n\ninterface LoaderProps extends FontProps {\n  provider?: string\n  onLoad?: (family: string, style: string) => void\n  onError?: (family: string, style: string) => void\n  onAllLoad?: () => void\n  onAllError?: () => void\n  text?: string\n}\n\nexport const FontLoader = ({\n  family,\n  weight = 400,\n  italic = false,\n  provider = 'google',\n  onLoad = () => {},\n  onError = () => {},\n  onAllLoad = () => {},\n  onAllError = () => {},\n  text = undefined\n}: LoaderProps): JSX.Element | null => {\n  useEffect(() => {\n    const WebFontConfig: WebFont.Config = {\n      classes: false,\n      fontactive: onLoad,\n      fontinactive: onError,\n      active: onAllLoad,\n      inactive: onAllError\n    }\n\n    if (provider === 'google') {\n      const fontFamily = GoogleFont({\n        family,\n        weight,\n        italic\n      })\n      WebFontConfig.google = {\n        families: [fontFamily],\n        text\n      }\n    } else if (provider === 'local') {\n      WebFontConfig.custom = {\n        families: [family]\n      }\n    }\n\n    WebFont.load(WebFontConfig)\n  }, [family, weight, italic, provider, onLoad, onError])\n\n  return null\n}\n\nconst GoogleFont = ({ family, weight = 400, italic = false }: FontProps) => {\n  let encodedURL = encodeURIComponent(family)\n\n  if (weight !== 400 && italic) {\n    encodedURL += `:bi`\n  } else if (weight !== 400) {\n    encodedURL += `:${weight}`\n  } else if (italic) {\n    encodedURL += `:i`\n  }\n\n  return encodedURL\n}\n\ninterface FontProps {\n  family: string\n  weight?: number\n  italic?: boolean\n}\n\nconst styleGen = ({ family, italic, weight }: FontProps) => {\n  return {\n    fontFamily: `'${family}'`,\n    fontStyle: italic ? 'italic' : undefined,\n    fontWeight: weight\n  }\n}\n\nexport default Font\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}