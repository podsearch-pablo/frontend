{"ast":null,"code":"'use strict';\n\nlet NoWorkResult = require('./no-work-result');\nlet LazyResult = require('./lazy-result');\nlet Document = require('./document');\nlet Root = require('./root');\nclass Processor {\n  constructor() {\n    let plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.version = '8.4.18';\n    this.plugins = this.normalize(plugins);\n  }\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]));\n    return this;\n  }\n  process(css) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.plugins.length === 0 && typeof opts.parser === 'undefined' && typeof opts.stringifier === 'undefined' && typeof opts.syntax === 'undefined') {\n      return new NoWorkResult(this, css, opts);\n    } else {\n      return new LazyResult(this, css, opts);\n    }\n  }\n  normalize(plugins) {\n    let normalized = [];\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i();\n      } else if (i.postcss) {\n        i = i.postcss;\n      }\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins);\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i);\n      } else if (typeof i === 'function') {\n        normalized.push(i);\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' + 'one of the syntax/parser/stringifier options as outlined ' + 'in your PostCSS runner documentation.');\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin');\n      }\n    }\n    return normalized;\n  }\n}\nmodule.exports = Processor;\nProcessor.default = Processor;\nRoot.registerProcessor(Processor);\nDocument.registerProcessor(Processor);","map":{"version":3,"names":["NoWorkResult","require","LazyResult","Document","Root","Processor","constructor","plugins","version","normalize","use","plugin","concat","process","css","opts","length","parser","stringifier","syntax","normalized","i","postcss","Array","isArray","postcssPlugin","push","parse","stringify","env","NODE_ENV","Error","module","exports","default","registerProcessor"],"sources":["/Users/vicky/Projects/podscout/frontend/node_modules/postcss/lib/processor.js"],"sourcesContent":["'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.18'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC9C,IAAIC,UAAU,GAAGD,OAAO,CAAC,eAAe,CAAC;AACzC,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC;AACpC,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAE5B,MAAMI,SAAS,CAAC;EACdC,WAAW,GAAe;IAAA,IAAdC,OAAO,uEAAG,EAAE;IACtB,IAAI,CAACC,OAAO,GAAG,QAAQ;IACvB,IAAI,CAACD,OAAO,GAAG,IAAI,CAACE,SAAS,CAACF,OAAO,CAAC;EACxC;EAEAG,GAAG,CAACC,MAAM,EAAE;IACV,IAAI,CAACJ,OAAO,GAAG,IAAI,CAACA,OAAO,CAACK,MAAM,CAAC,IAAI,CAACH,SAAS,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC;IAC5D,OAAO,IAAI;EACb;EAEAE,OAAO,CAACC,GAAG,EAAa;IAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;IACpB,IACE,IAAI,CAACR,OAAO,CAACS,MAAM,KAAK,CAAC,IACzB,OAAOD,IAAI,CAACE,MAAM,KAAK,WAAW,IAClC,OAAOF,IAAI,CAACG,WAAW,KAAK,WAAW,IACvC,OAAOH,IAAI,CAACI,MAAM,KAAK,WAAW,EAClC;MACA,OAAO,IAAInB,YAAY,CAAC,IAAI,EAAEc,GAAG,EAAEC,IAAI,CAAC;IAC1C,CAAC,MAAM;MACL,OAAO,IAAIb,UAAU,CAAC,IAAI,EAAEY,GAAG,EAAEC,IAAI,CAAC;IACxC;EACF;EAEAN,SAAS,CAACF,OAAO,EAAE;IACjB,IAAIa,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,IAAId,OAAO,EAAE;MACrB,IAAIc,CAAC,CAACC,OAAO,KAAK,IAAI,EAAE;QACtBD,CAAC,GAAGA,CAAC,EAAE;MACT,CAAC,MAAM,IAAIA,CAAC,CAACC,OAAO,EAAE;QACpBD,CAAC,GAAGA,CAAC,CAACC,OAAO;MACf;MAEA,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAIE,KAAK,CAACC,OAAO,CAACH,CAAC,CAACd,OAAO,CAAC,EAAE;QACrDa,UAAU,GAAGA,UAAU,CAACR,MAAM,CAACS,CAAC,CAACd,OAAO,CAAC;MAC3C,CAAC,MAAM,IAAI,OAAOc,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAACI,aAAa,EAAE;QACnDL,UAAU,CAACM,IAAI,CAACL,CAAC,CAAC;MACpB,CAAC,MAAM,IAAI,OAAOA,CAAC,KAAK,UAAU,EAAE;QAClCD,UAAU,CAACM,IAAI,CAACL,CAAC,CAAC;MACpB,CAAC,MAAM,IAAI,OAAOA,CAAC,KAAK,QAAQ,KAAKA,CAAC,CAACM,KAAK,IAAIN,CAAC,CAACO,SAAS,CAAC,EAAE;QAC5D,IAAIf,OAAO,CAACgB,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzC,MAAM,IAAIC,KAAK,CACb,kEAAkE,GAChE,2DAA2D,GAC3D,uCAAuC,CAC1C;QACH;MACF,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAACV,CAAC,GAAG,0BAA0B,CAAC;MACjD;IACF;IACA,OAAOD,UAAU;EACnB;AACF;AAEAY,MAAM,CAACC,OAAO,GAAG5B,SAAS;AAC1BA,SAAS,CAAC6B,OAAO,GAAG7B,SAAS;AAE7BD,IAAI,CAAC+B,iBAAiB,CAAC9B,SAAS,CAAC;AACjCF,QAAQ,CAACgC,iBAAiB,CAAC9B,SAAS,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}